// <auto-generated />
using System;
using FinancialSystemAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinancialSystemAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinancialSystemAPI.Models.Account", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountNumber");

                    b.HasIndex("CustomerId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountNumber = "595540-6",
                            Balance = 1250.95m,
                            CustomerId = "622.850.130-51",
                            Type = "Current account"
                        },
                        new
                        {
                            AccountNumber = "92172-7",
                            Balance = 2250.45m,
                            CustomerId = "352.252.250-81",
                            Type = "Current Account"
                        },
                        new
                        {
                            AccountNumber = "196020-2",
                            Balance = 4550m,
                            CustomerId = "185.828.510-55",
                            Type = "Current Account"
                        },
                        new
                        {
                            AccountNumber = "50548-7",
                            Balance = 50m,
                            CustomerId = "092.863.523-46",
                            Type = "Current Account"
                        });
                });

            modelBuilder.Entity("FinancialSystemAPI.Models.TransactionCash", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountDestinationAccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountOriginAccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountDestinationAccountNumber");

                    b.HasIndex("AccountOriginAccountNumber");

                    b.ToTable("TransactionCashs");
                });

            modelBuilder.Entity("FinancialSystemAPI.Models.User", b =>
                {
                    b.Property<string>("CPF")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("CPF");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FinancialSystemAPI.Models.AccountManager", b =>
                {
                    b.HasBaseType("FinancialSystemAPI.Models.User");

                    b.Property<int>("EmployeeCode")
                        .HasColumnType("int");

                    b.ToTable("User", t =>
                        {
                            t.Property("EmployeeCode")
                                .HasColumnName("AccountManager_EmployeeCode");
                        });

                    b.HasDiscriminator().HasValue("AccountManager");
                });

            modelBuilder.Entity("FinancialSystemAPI.Models.BoxCash", b =>
                {
                    b.HasBaseType("FinancialSystemAPI.Models.User");

                    b.Property<int>("EmployeeCode")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("BoxCash");
                });

            modelBuilder.Entity("FinancialSystemAPI.Models.Customer", b =>
                {
                    b.HasBaseType("FinancialSystemAPI.Models.User");

                    b.HasDiscriminator().HasValue("Customer");

                    b.HasData(
                        new
                        {
                            CPF = "622.850.130-51",
                            Email = "YujiItadori@gmail.com",
                            Name = "Yuji Itadori",
                            Phone = "+55 1191234-5678"
                        },
                        new
                        {
                            CPF = "352.252.250-81",
                            Email = "MegumiFushiguro@gmail.com",
                            Name = "Megumi Fushiguro",
                            Phone = "+55 1191234-5678"
                        },
                        new
                        {
                            CPF = "185.828.510-55",
                            Email = "NobaraKugisaki@gmail.com",
                            Name = "Nobara Kugisaki",
                            Phone = "+55 1191234-5678"
                        },
                        new
                        {
                            CPF = "092.863.523-46",
                            Email = "SatoruGojo@gmail.com",
                            Name = "Satoru Gojo",
                            Phone = "+55 1191234-5678"
                        });
                });

            modelBuilder.Entity("FinancialSystemAPI.Models.Account", b =>
                {
                    b.HasOne("FinancialSystemAPI.Models.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FinancialSystemAPI.Models.TransactionCash", b =>
                {
                    b.HasOne("FinancialSystemAPI.Models.Account", "AccountDestination")
                        .WithMany()
                        .HasForeignKey("AccountDestinationAccountNumber");

                    b.HasOne("FinancialSystemAPI.Models.Account", "AccountOrigin")
                        .WithMany()
                        .HasForeignKey("AccountOriginAccountNumber");

                    b.Navigation("AccountDestination");

                    b.Navigation("AccountOrigin");
                });

            modelBuilder.Entity("FinancialSystemAPI.Models.Customer", b =>
                {
                    b.OwnsOne("FinancialSystemAPI.Models.ObjectValue.AddressObjectValue", "AddressObjectValue", b1 =>
                        {
                            b1.Property<string>("CustomerCPF")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("nvarchar(11)");

                            b1.HasKey("CustomerCPF");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("CustomerCPF");

                            b1.HasData(
                                new
                                {
                                    CustomerCPF = "622.850.130-51",
                                    City = "Sendai-shi",
                                    Country = "Japão",
                                    State = "Miyagi",
                                    ZipCode = "984-0032"
                                },
                                new
                                {
                                    CustomerCPF = "352.252.250-81",
                                    City = "Tsumiki Fushiguro",
                                    Country = "Japão",
                                    State = "Toji Fushiguro",
                                    ZipCode = "984-0082"
                                },
                                new
                                {
                                    CustomerCPF = "185.828.510-55",
                                    City = "Morioka",
                                    Country = "Japão",
                                    State = "Iwate",
                                    ZipCode = "984-0032"
                                },
                                new
                                {
                                    CustomerCPF = "092.863.523-46",
                                    City = "Purple Void",
                                    Country = "Japão",
                                    State = "Unlimited",
                                    ZipCode = "984-0032"
                                });
                        });

                    b.Navigation("AddressObjectValue");
                });

            modelBuilder.Entity("FinancialSystemAPI.Models.Customer", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
